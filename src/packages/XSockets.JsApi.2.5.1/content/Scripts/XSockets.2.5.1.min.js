var Subscriptions = (function () { var c = []; this.add = function (e, h, f) { e = e.toLowerCase(); var d = this.get(e); if (d === null) { var g = new a(e); g.addCallback(h, f); c.push(g); return 1 } d.addCallback(h, f); return d.Callbacks.length }; this.get = function (d) { if (typeof (d) === "undefined") { return } d = d.toLowerCase(); for (var e = 0; e < c.length; e++) { if (c[e].Name === d) { return c[e] } } return null }; this.getAll = function () { return c }; this.remove = function (e, d) { e = e.toLowerCase(); for (var f = 0; f < c.length; f++) { if (c[f].Name === e) { if (d === undefined) { c.splice(f, 1) } else { c[f].Callbacks.splice(d - 1, 1); if (c[f].Callbacks.length === 0) { c.splice(f, 1) } } return true } } return false }; this.fire = function (f, h, d, e) { if (typeof (f) === "undefined") { return } f = f.toLowerCase(); for (var g = 0; g < c.length; g++) { if (c[g].Name === f) { if (e === undefined) { c[g].fireCallbacks(h, d) } else { c[g].fireCallback(h, d, e) } } } }; var a = function (d) { this.Name = d; this.Callbacks = []; this.addCallback = function (f, e) { this.Callbacks.push(new b(d, f, e)) }; this.fireCallback = function (g, e, f) { this.Callbacks[f - 1].fn(g); if (typeof (this.Callbacks[f - 1].state) === "object") { if (typeof (this.Callbacks[f - 1].state.options) !== "undefined" && typeof (this.Callbacks[f - 1].state.options.counter) !== "undefined") { this.Callbacks[f - 1].state.options.counter.messages--; if (this.Callbacks[f - 1].state.options.counter.messages === 0) { if (typeof (this.Callbacks[f - 1].state.options.counter.completed) === "function") { this.Callbacks[f - 1].state.options.counter.completed() } } } } if (e && typeof (e) === "function") { e(this.Callbacks[f - 1].name) } }; this.fireCallbacks = function (f, e) { for (var g = 0; g < this.Callbacks.length; g++) { this.fireCallback(f, e, g + 1) } } }; var b = function (d, f, e) { this.name = d; this.fn = f; this.state = e }; return this }); (function () { var a = { Delay: 20, Events: { onError: "xsockets.onerror", open: "xsockets.xnode.open", close: "close", storage: { set: "xsockets.storage.set", get: "xsockets.storage.get", getAll: "xsockets.storage.getall", remove: "xsockets.storage.remove" }, serverstatus: { status: "xsockets.server.status" }, onBlob: "blob", connection: { getallclients: "xsockets.getallclients", onclientconnect: "xsockets.onclientconnect", onclientdisconnect: "xsockets.onclientdisconnect", disconnect: "xsockets.disconnect" } }, Utils: { getParameterByName: function (c) { c = c.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var b = "[\\?&]" + c + "=([^&#]*)"; var e = new RegExp(b); var d = e.exec(window.location.search); if (d == null) { return "" } else { return decodeURIComponent(d[1].replace(/\+/g, " ")) } }, extend: function (e, c) { if (arguments.length > 2) { for (var b = 1; b < arguments.length; b++) { extend(e, arguments[b]) } } else { for (var d in c) { e[d] = c[d] } } return e }, guid: function (d, c) { for (c = d = ""; d++ < 36; c += d * 51 & 52 ? (d ^ 15 ? 8 ^ Math.random() * (d ^ 20 ? 16 : 4) : 4).toString(16) : "-") { } return c } }, WebSocket: function (d, f, e) { var g = null; var k = this; var c = new Subscriptions(); var l = XSockets.Utils.extend({ apikey: null, parameters: {}, binaryType: "arraybuffer" }, e); this.connection = {}; this.handler = f; this.channel = {}; var i = { subscribe: "xsockets.subscribe", unsubscribe: "xsockets.unsubscribe", getSubscriptions: "xsockets.getsubscriptions", getAllSubscriptions: "xsockets.getallsubscriptions" }; var j = function (n) { var o = "?"; for (var m in n) { o += m + "=" + encodeURIComponent(n[m]) + "&" } o = o.slice(0, o.length - 1); return o }; this.close = function (m) { this.trigger(XSockets.Events.connection.disconnect, {}, m) }; this.getSubscriptions = function () { return c.getAll() }; this.bind = function (p, m, n, r) { var q = { options: n, ready: g.readyState }; if (q.ready === 1) { k.trigger(new XSockets.Message(i.subscribe, { Event: p })) } if (m instanceof Function) { c.add(p, m, q) } else { if (m instanceof Array) { m.forEach(function (o) { c.add(p, o, q) }) } } if (r && typeof (r) === "function") { r() } return this }; this.unbind = function (m, n) { if (c.remove(m)) { k.trigger(new XSockets.Message(i.unsubscribe, { Event: m })) } if (n && typeof (n) === "function") { n() } return this }; this.many = function (o, n, p, m) { k.bind(o, p, XSockets.Utils.extend({ counter: { messages: n, completed: function () { k.unbind(o) } } }, m)); return this }; this.one = function (n, o, m) { k.bind(n, o, XSockets.Utils.extend({ counter: { messages: 1, completed: function () { k.unbind(n) } } }, m)); return this }; this.trigger = function (o, m, p) { if (typeof (o) !== "object") { if (arguments.length !== 2 || typeof (m) !== "function") { if (arguments.length === 1) { m = {} } } else { p = m; m = {} } } if (typeof (o) !== "object") { o = o.toLowerCase(); var n = new XSockets.Message(o, m); g.send(n.toString()); if (p && typeof (p) === "function") { p() } } else { g.send(o.toString()); if (m && typeof (m) === "function") { m() } } return this }; this.send = function (m) { g.send(m) }; var h = function (m, n) { if (c.get(m) === null) { return } if (typeof n === "string") { n = JSON.parse(n) } c.fire(m, n, function (o) { }) }; if ("WebSocket" in window) { var b = window.localStorage.getItem("XSocketsClientStorageGuid" + f) !== null ? window.localStorage.getItem("XSocketsClientStorageGuid" + f) : null; if (l.apikey !== null) { l.parameters.apikey = l.apikey } if (b !== null) { l.parameters.XSocketsClientStorageGuid = b } d = d + j(l.parameters); g = new window.WebSocket(d, f); g.binaryType = l.binaryType } if (g !== null) { k.bind(a.Events.open, function (n) { k.connection = n; window.localStorage.setItem("XSocketsClientStorageGuid" + f, n.StorageGuid); var m = c.getAll(); for (var o = 0; o < m.length; o++) { for (var p = 0; p < m[o].Callbacks.length; p++) { if (m[o].Callbacks[p].ready !== 1) { k.trigger(new XSockets.Message(i.subscribe, { Event: m[o].Name })) } } } }, { subscribe: false }); g.onclose = function (m) { h("close", m) }; g.onopen = function (m) { h("open", m) }; g.onmessage = function (m) { if (typeof m.data === "string") { var n = JSON.parse(m.data); h(n.event, n.data) } else { h(XSockets.Events.onBlob, m.data) } } } return { currentConnction: function () { return k.connection }, close: k.close, bind: k.bind, unbind: k.unbind, one: k.one, many: k.many, on: k.bind, off: k.unbind, trigger: k.trigger, triggerBinary: k.send, send: k.send, channel: k.channel, subscribe: k.bind, unsubscribe: k.unbind, publish: k.trigger, subscriptions: k.getSubscriptions } }, Channel: function () { var c = function (e, g, f) { var i = a.Utils.guid(); var h = e + "/" + i; var d = new XSockets.WebSocket(h, g, f); d.channel = { Id: i, args: [h, g, f] }; return d }; var b = function (d) { return new XSockets.WebSocket(d.args[0], d.args[1], d.args[2]) }; return { Create: c, Connect: b } }(), Message: function (d, b) { var c = { event: d, data: JSON.stringify(b) }; this.JSON = function () { return c }(); this.toString = function () { return JSON.stringify(c) }; return this } }; if (!window.jXSockets) { window.jXSockets = a } if (!window.XSockets) { window.XSockets = a } })();